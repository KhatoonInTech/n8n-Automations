{
  "name": "My workflow 5",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "weeks",
              "triggerAtDay": [
                6
              ],
              "triggerAtHour": 11
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -120,
        -20
      ],
      "id": "6ef69696-44c6-492f-98b9-8ade458e61c4",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=**Role & Goal:**\nYou are an expert 'AI News Breaker' agent. Your mission is to transform a raw HTML news article about AI into a compelling, ready-to-publish LinkedIn post. You will receive raw HTML content from a single news article for today.\n\n**Instructions:**\n\n1.  **Analyze the HTML:** First, meticulously analyze the provided HTML content. Ignore all HTML tags (`<a>`, `<div>`, `<p>`, etc.) and focus on extracting the core information: the main topic, key findings, important names or companies, and the overall significance of the news.\n\n\n2.  **Craft the Content:** Based on your analysis, generate the following content:\n    *   **Title:** Create a short, catchy, and professional `title` for the LinkedIn post. This should be an attention-grabbing headline.\n    *   **Post Text:** Write the `post_text`. This must be a detailed, atleast 2000 characters long, summary of the article, written in a professional yet conversational tone. Explain the key news clearly, as if you're breaking it to your professional network. Start with a strong opening and end with an engaging question to spark discussion and comments.MAKE SURE TO USE 'UNICODE' CHARACTERS ONLY FOR BOLD AND ITALIC FONT INSTEAD OF (**) AND (__)\n    *   **Visual Idea:** Create a compelling `visual_idea`. This should be a short, descriptive prompt for an AI image generator (like DALL-E 3 or Midjourney) that visually represents the core concept of the news article. Be descriptive and creative.\n\n4.  **Strict Constraints:**\n    *   **No Links:** The `post_text` **must not contain any URLs, links, or hyperlinks** from the source HTML.\n    *   **No Source Mention:** Do not mention the source website or the author of the original article. Focus only on the news itself.\n    *   **Single Day:** Generate content ONLY for today. Do not create a multi-day plan.\n\n**Output Format:**\nFormat your entire output as a single, clean JSON object. Do not include any text, explanations, or markdown formatting (` ```json `) outside of the JSON structure itself.\n\nThe JSON object must strictly follow this schema:\n```json\n{\n  \"title\": \"Your generated post title\",\n  \"post_text\": \"Your generated conversational LinkedIn post content, without any links.\",\n  \"visual_idea\": \"Your descriptive prompt for an AI image generator.\"\n}\n```\n\n**Input Data:**\nHere is the raw HTML content for today's news:\n{{ $json.plainText }}",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        880,
        -20
      ],
      "id": "31ae6bca-5ed4-4dab-8684-fd42d5142067",
      "name": "AI Agent",
      "executeOnce": false,
      "retryOnFail": true,
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "model": "deepseek-r1-distill-llama-70b",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        880,
        280
      ],
      "id": "1eef523f-0314-4e0b-8812-e8a1d8a00cf9",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "gJPKzqAC9yefXebH",
          "name": "Groq account"
        }
      },
      "notes": "You are a world-class LinkedIn strategist and content creator. Your goal is to create an engaging, valuable, and brand-aligned content plan for one full week (7 days).\n\n**My Brand/Profile:**\n[IMPORTANT: REPLACE THIS BRACKETED TEXT. For example: \"A B2B SaaS company specializing in project management tools for software development teams.\"]\n\n**My Target Audience:**\n[IMPORTANT: REPLACE THIS BRACKETED TEXT. For example: \"Project Managers, CTOs, and Engineering Leads in mid-to-large sized tech companies.\"]\n\n**The Task:**\nGenerate a 7-day content plan for LinkedIn. For each day, provide a day name, the full text for the LinkedIn post, and a creative idea for a visual (e.g., an image, a carousel, a simple chart, a poll). The posts should be varied and engaging.\n\n**CRITICAL INSTRUCTION - OUTPUT FORMAT:**\nYour entire response MUST be a single, valid JSON array of objects. Do not include any text, explanation, or markdown formatting before or after the JSON array. Each object in the array must represent a day and contain three keys: \"day\", \"post_text\", and \"visual_idea\".\n\nHere is an example of the required format:\n[\n  {\n    \"day\": \"Monday\",\n    \"post_text\": \"Post content for Monday goes here...\",\n    \"visual_idea\": \"Visual suggestion for Monday goes here...\"\n  },\n  {\n    \"day\": \"Tuesday\",\n    \"post_text\": \"Post content for Tuesday goes here...\",\n    \"visual_idea\": \"Visual suggestion for Tuesday goes here...\"\n  }\n]"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"title\": {\n      \"type\": \"string\",\n      \"description\": \"A short, catchy title for the post (5-10 words).\"\n    },\n    \"post_text\": {\n      \"type\": \"string\",\n      \"description\": \"The full, detailed LinkedIn post content.\"\n    },\n    \"visual_idea\": {\n      \"type\": \"string\",\n      \"description\": \"A creative suggestion for the accompanying visual.\"\n    }\n  },\n  \"required\": [\n    \"title\",\n    \"post_text\",\n    \"visual_idea\"\n  ]\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        1040,
        280
      ],
      "id": "72112182-d01c-415e-87ba-301977ac8ca7",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "postAs": "organization",
        "organization": "YOUR_URN",
        "text": "={{ $('AI Agent').item.json.output.title }}\n\n{{ $('AI Agent').item.json.output.post_text }}\n\nRead the full article here: {{ $('AI NEWS Fetcher').item.json.items[0].link }}\n\nFor more such news and stories, follow @https://www.linkedin.com/company/106197780",
        "shareMediaCategory": "IMAGE",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.linkedIn",
      "typeVersion": 1,
      "position": [
        1720,
        -20
      ],
      "id": "8245ec3c-1aa6-46fd-b5c6-a102d33e2acf",
      "name": "Create a post",
      "executeOnce": true,
      "alwaysOutputData": true,
      "credentials": {
        "linkedInOAuth2Api": {
          "id": "HHo78dtiPAUfatSn",
          "name": "LinkedIn account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/customsearch/v1",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "YOUR_API_KEY"
            },
            {
              "name": "cx",
              "value": "YOUR_CX_ID"
            },
            {
              "name": "q",
              "value": "Latest AI News"
            },
            {
              "name": "dateRestrict",
              "value": "d1"
            },
            {
              "name": "num",
              "value": "1"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        100,
        -20
      ],
      "id": "bd5cccd3-06c6-47ff-94b5-c9449fe650be",
      "name": "AI NEWS Fetcher"
    },
    {
      "parameters": {
        "url": "={{ $json.items[0].link }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/118.0"
            },
            {
              "name": "Cookie",
              "value": "CONSENT=YES+cb.20220419-08-p0.cs+FX+111"
            },
            {
              "name": "cookie",
              "value": "CONSENT=YES+cb.20220419-08-p0.cs+FX+111;"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        420,
        -20
      ],
      "id": "6b2e95cb-d2c8-4841-9aff-de05cee93374",
      "name": "Web Scrapper"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/imagen-4.0-generate-preview-06-06:predict",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-goog-api-key",
              "value": "YOUR_API_KEY"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"instances\": [\n    {\n      \"prompt\": \"a meme that has following text\\n \\\"{{ $json.output.title }} \\\"\\n along with a polaroid portrait of {{ $json.output.visual_idea }}\"\n    }\n  ],\n  \"parameters\": {\n    \"sampleCount\": 1\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1300,
        -20
      ],
      "id": "39d40638-8fd6-4301-97b8-34535131c7fe",
      "name": "Visuals Generator"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "predictions[0].bytesBase64Encoded",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1520,
        -20
      ],
      "id": "1259c0fb-4c37-4d30-991c-5cd515da402d",
      "name": "bs64 decoder"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "#\n# n8n Code Node: Aggressive HTML Body to Plain Text (Simple Python)\n#\n\nimport re\nimport html\n\noutput_items = []\n\nfor item in items:\n    html_content = item.json.get('data')\n\n    if not html_content:\n        output_items.append({'json': {'plainText': ''}})\n        continue\n\n    # 1. Isolate the content within the <body> tag.\n    body_match = re.search(r'<body.*?>(.*?)</body>', html_content, re.DOTALL | re.IGNORECASE)\n    if body_match:\n        text = body_match.group(1)\n    else:\n        text = html_content\n\n    # 2. Aggressively remove specific unwanted blocks and their contents.\n    # We define a list of tags whose entire content should be removed.\n    tags_to_remove = [\n        'script', # Remove JavaScript\n        'style',  # Remove CSS\n        'table',  # Remove tables\n        'form',   # Remove forms and inputs\n        'iframe', # Remove embedded frames\n        'nav',    # Remove navigation elements\n        'footer', # Remove footer content\n        'code'    # Remove code blocks\n    ]\n\n    for tag in tags_to_remove:\n        # Construct regex pattern: <tag ...> ... </tag>\n        # This removes the tag and everything inside it.\n        pattern = r'<' + tag + r'.*?>.*?</' + tag + r'>'\n        text = re.sub(pattern, ' ', text, flags=re.DOTALL | re.IGNORECASE)\n\n    # 3. Remove all remaining HTML tags (e.g., <a>, <p>, <h1>).\n    text = re.sub(r'<.*?>', ' ', text)\n\n    # 4. Decode HTML entities (e.g., & -> &).\n    text = html.unescape(text)\n\n    # 5. Clean up whitespace: normalize newlines and remove excess spaces.\n    lines = [line.strip() for line in text.splitlines()]\n    # Re-join non-empty lines to get the final clean text.\n    clean_text = '\\n'.join(line for line in lines if line)\n    if len(clean_text)>5000:\n      clean_text= clean_text[:2500]+clean_text[-2500:]\n    # Create a new JSON object containing ONLY the plainText key.\n    output_json = {'plainText': clean_text, 'char-limit': 5000,'char_used': len(clean_text)}\n    output_items.append({'json': output_json})\n\n# Return the processed items.\nreturn output_items"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        -20
      ],
      "id": "e5a8bb2c-525a-41fa-9eef-ffff26ee67d8",
      "name": "plain_text"
    }
  ],
  "pinData": {},
  "connections": {
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "AI NEWS Fetcher",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Visuals Generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI NEWS Fetcher": {
      "main": [
        [
          {
            "node": "Web Scrapper",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Web Scrapper": {
      "main": [
        [
          {
            "node": "plain_text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Visuals Generator": {
      "main": [
        [
          {
            "node": "bs64 decoder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "bs64 decoder": {
      "main": [
        [
          {
            "node": "Create a post",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "plain_text": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "",
  "meta": {
    "instanceId": "45c930beb7d90288451fc453f56a84dc509ea879769783e8b1667c992c5df55b"
  },
  "tags": []
}